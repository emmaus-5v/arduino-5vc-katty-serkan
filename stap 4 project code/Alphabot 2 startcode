//*****************************************
//   variabelen waarvan je gebruik maakt
// *****************************************
// gebruikte pinnen
#define AIN2   A0          //Motor Links naar voren (IN2).
#define AIN1   A1          //Motor links naar achteren (IN1)
#define BIN1   A2          //Motor rechts naar voren (IN3)
#define BIN2   A3          //Motor rechts naar achter (IN4)
#define ECHO   2           //Ultrasonische ontvanger pin   
#define TRIG   3           //Ultrasonische uitzender pin
#define Addr  0x20         //Joystick

int const motorSnelheidL = 6; //motor links PWMA
int const motorSnelheidR = 5; //motor rechts PWMB

// variabelen om waarden van sensoren en actuatoren te onthouden
int snelheidR = 0;
int  snelheidL = 0;

// variabelen voor de toestanden maken 
// toestanden:

int const START = 1;
int const EINDE = 2;
int const RIJDEN = 3;
int const STOPPEN = 4;
int const DRAAIEN = 5;
int const UIT = 6;

//variabele toestand maken
int const toestand = UIT;

/*****************************************
   functies waarvan je gebruik maakt
 *****************************************/
 
//Afstand meten 
int AfstandTest()        {
  digitalWrite(TRIG, LOW);   // set trig pin low 2μs
  delayMicroseconds(2);
  digitalWrite(TRIG, HIGH);  // set trig pin 10μs , at last 10us 
  delayMicroseconds(10);
  digitalWrite(TRIG, LOW);    // set trig pin low
  float Fdistance = pulseIn(ECHO, HIGH);  // Read echo pin high level time(us)
  Fdistance= Fdistance/58;       //Y m=（X s*344）/2
  // X s=（ 2*Y m）/344 ==》X s=0.0058*Y m ==》cm = us /58       
  return (int)Fdistance;
} 

/*****************************************
            setup()
 *****************************************/

void setup() {
  // enable console en stuur opstartbericht
  Serial.begin(115200);
  Serial.println("Start Alphabot");

  // zet pinmode 
   {
  pinMode(ECHO, INPUT);    // Define the ultrasonic echo input pin
  pinMode(TRIG, OUTPUT);   // Define the ultrasonic trigger input pin 
  pinMode(motorSnelheidL,OUTPUT);                     
  pinMode(AIN2,OUTPUT);      
  pinMode(AIN1,OUTPUT);
  pinMode(motorSnelheidR,OUTPUT);       
  pinMode(AIN1,OUTPUT);     
  pinMode(AIN2,OUTPUT); 
  digitalRead(Addr);
  analogWrite(motorSnelheidL,snelheidL);
  analogWrite(motorSnelheidR,snelheidR);  
}



/*****************************************
            Loop
 *****************************************/

void loop() {

  // bepaal afstand
  {
  Afstand = AfstandTest();                 //display distance 
  Serial.print("Distance = ");            //print distance
  Serial.print(Distance);       
  Serial.println("cm");  }
  
  // bepaal toestand
  if (digitalRead(Addr) == HIGH && toestand == UIT) {
      toestand = START
      Serial.println("Nieuwe toestand: START");
     }
  
   if (toestand == START) {
      toestand = RIJDEN;
      Serial.println("Nieuwe toestand: RIJDEN");
    }
    
  if (toestand == RIJDEN) {
    digitalWrite(BIN1, HIGH)
    digitalWrite(AIN2, HIGH)
  if (digitalRead(Fdistance) < 10) {
      toestand = REMMEN;
      Serial.println("Nieuwe toestand: REMMEN");
   }
  }
  
  if (toestand == REMMEN) {
   digitalWrite(BIN1, LOW);
   digitalWrite(AIN2, LOW);
   delay(200);
   toestand = DRAAIEN;
    }
  
  if (toestand == DRAAIEN) {
    digitalWrite(AIN1, HIGH);
    digitalWrite(BIN1, HIGH);
    delay(200);
    toestand = RIJDEN;
  }
  
   if (Addr == HIGH && toestand == RIJDEN) {
    toestand == UIT;
  }
  
  
  //zet waarden voor actautoren, voor alle toestanden
  analogWrite(motorSnelheidR, snelheidR);
  analogWrite(motorSnelheidL, snelheidL);

  // vertraging om te zorgen dat berichten op de seriele monitor leesbaar blijven
  delay(100);
}



